# -*- coding: utf-8 -*-
"""Arctic Sea Ice Data Description & Preparation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1InqcFV5NmfLP_NocNJAyvFa-pndYHy_v
"""

import pandas as pd
import matplotlib.pyplot as plt
plt.style.use("fivethirtyeight")
import numpy as np
import time
#%%
df = pd.read_csv("https://raw.githubusercontent.com/SN129090/NU-Climate-Data-Analytics-Project/main/Baffin%20Sea%20Ice%20Extent.csv")
df_beau = pd.read_csv("https://raw.githubusercontent.com/SN129090/NU-Climate-Data-Analytics-Project/main/Beaufort%20Sea%20Ice%20Extent.csv")
df_canarc = pd.read_csv("https://raw.githubusercontent.com/SN129090/NU-Climate-Data-Analytics-Project/main/CanArch%20Sea%20Ice%20Extent.csv")
df_hudson = pd.read_csv("https://raw.githubusercontent.com/SN129090/NU-Climate-Data-Analytics-Project/main/Hudson%20Sea%20Ice%20Extent.csv")
#%%
### Data preparation - converting the matrix of values into a single column for each dataset, 
### Creating date column and assigning as index

df['day'] = (df['day']).astype(str)
df['Month-Day'] = pd.concat([df['month'] + "-" + df['day']])
df_beau['day'] = (df_beau['day']).astype(str)
df_beau['Month-Day'] = pd.concat([df_beau['month'] + "-" + df_beau['day']])
df_canarc['day'] = (df_canarc['day']).astype(str)
df_canarc['Month-Day'] = pd.concat([df_canarc['month'] + "-" + df_canarc['day']])
df_hudson['day'] = (df_hudson['day']).astype(str)
df_hudson['Month-Day'] = pd.concat([df_hudson['month'] + "-" + df_hudson['day']])


baffin_melt = df.melt(id_vars='Month-Day', var_name='Year', value_name="BAFFIN SEA ICE EXTENT")
baffin_melt['Year'] = baffin_melt['Year'].astype(str)
baffin_melt = baffin_melt[baffin_melt.Year != 'month']
baffin_melt = baffin_melt[baffin_melt.Year != 'day']
baffin_melt['Date'] = pd.concat([baffin_melt['Month-Day']+"-"+baffin_melt['Year']])
baffin_melt = baffin_melt.dropna(axis=0)
baffin_melt['BAFFIN SEA ICE EXTENT'] = baffin_melt['BAFFIN SEA ICE EXTENT'].astype(np.float64)

beau_melt = df_beau.melt(id_vars='Month-Day', var_name='Year', value_name="BEAUFORT SEA ICE EXTENT")
beau_melt['Year'] = beau_melt['Year'].astype(str)
beau_melt = beau_melt[beau_melt.Year != 'month']
beau_melt = beau_melt[beau_melt.Year != 'day']
beau_melt['Date'] = pd.concat([beau_melt['Month-Day']+"-"+beau_melt['Year']])
beau_melt = beau_melt.dropna(axis=0)

canarc_melt = df_canarc.melt(id_vars='Month-Day', var_name='Year', value_name="CAN. ARCH. SEA ICE EXTENT")
canarc_melt['Year'] = canarc_melt['Year'].astype(str)
canarc_melt = canarc_melt[canarc_melt.Year != 'month']
canarc_melt = canarc_melt[canarc_melt.Year != 'day']
canarc_melt['Date'] = pd.concat([canarc_melt['Month-Day']+"-"+canarc_melt['Year']])
canarc_melt = canarc_melt.dropna(axis=0)

hudson_melt = df_hudson.melt(id_vars='Month-Day', var_name='Year', value_name="HUDSON BAY SEA ICE EXTENT")
hudson_melt['Year'] = hudson_melt['Year'].astype(str)
hudson_melt = hudson_melt[hudson_melt.Year != 'month']
hudson_melt = hudson_melt[hudson_melt.Year != 'day']
hudson_melt['Date'] = pd.concat([hudson_melt['Month-Day']+"-"+hudson_melt['Year']])
hudson_melt = hudson_melt.dropna(axis=0)

baffin_melt['Date'] = pd.to_datetime(baffin_melt['Date'], format='%B-%d-%Y')
baffin_melt['Date']
baffin_melt.set_index('Date', inplace =True)

beau_melt['Date'] = pd.to_datetime(beau_melt['Date'], format='%B-%d-%Y')
beau_melt['Date']
beau_melt.set_index('Date', inplace =True)

canarc_melt['Date'] = pd.to_datetime(canarc_melt['Date'], format='%B-%d-%Y')
canarc_melt['Date']
canarc_melt.set_index('Date', inplace =True)

hudson_melt['Date'] = pd.to_datetime(hudson_melt['Date'], format='%B-%d-%Y')
hudson_melt['Date']
hudson_melt.set_index('Date', inplace =True)
#%%
# Restoring month from date
baffin_melt['month'] = [d.strftime('%b') for d in baffin_melt.index]
beau_melt['month'] = [d.strftime('%b') for d in beau_melt.index]
canarc_melt['month'] = [d.strftime('%b') for d in canarc_melt.index]
hudson_melt['month'] = [d.strftime('%b') for d in hudson_melt.index]
#%%
from statsmodels.tsa.stattools import adfuller
adf, pvalue, usedlag_, nobs_, critical_values_, icbest_ = adfuller(baffin_melt["BAFFIN SEA ICE EXTENT"])
print("Baffin pvalue = ", pvalue, " if above 0.05, data is not stationary")
#%%
adf, pvalue, usedlag_, nobs_, critical_values_, icbest_ = adfuller(beau_melt["BEAUFORT SEA ICE EXTENT"])
print("Beaufort Sea pvalue = ", pvalue, " if above 0.05, data is not stationary")
#%%
adf, pvalue, usedlag_, nobs_, critical_values_, icbest_ = adfuller(canarc_melt["CAN. ARCH. SEA ICE EXTENT"])
print("Canadian Archipelago pvalue = ", pvalue, " if above 0.05, data is not stationary")
#%%
adf, pvalue, usedlag_, nobs_, critical_values_, icbest_ = adfuller(hudson_melt["HUDSON BAY SEA ICE EXTENT"])
print("Hudson Bay pvalue = ", pvalue, " if above 0.05, data is not stationary")
#%%
# Reduce to monthly
baff_m = baffin_melt['BAFFIN SEA ICE EXTENT'].groupby(pd.Grouper(freq="M")).mean()
beau_m = beau_melt['BEAUFORT SEA ICE EXTENT'].groupby(pd.Grouper(freq="M")).mean()
canarc_m = canarc_melt['CAN. ARCH. SEA ICE EXTENT'].groupby(pd.Grouper(freq="M")).mean()
hudson_m = hudson_melt['HUDSON BAY SEA ICE EXTENT'].groupby(pd.Grouper(freq="M")).mean()
#%%
# ARIMA MODEL SELECTION - BAFFIN
from pmdarima.arima import auto_arima
baf_arima_model = auto_arima(baff_m, start_p = 1, d=1, start_q = 1, 
                          max_p = 5, max_q = 5, max_d=5, m = 12, 
                          start_P = 0, D=0, start_Q=0, max_P=5, max_D=5, max_Q=5,
                          seasonal = True, 
                          trace = True, 
                          stationary = False,
                          error_action ='ignore',   
                          suppress_warnings = True,  
                          stepwise = True, n_fits=50)
#%%
# ARIMA MODEL SELECTION - BEAUFORT SEA
beau_arima_model = auto_arima(beau_m, start_p = 1, d=1, start_q = 1, 
                          max_p = 5, max_q = 5, max_d=5, m = 12, 
                          start_P = 0, D=0, start_Q=0, max_P=5, max_D=5, max_Q=5,
                          seasonal = True, 
                          trace = True, 
                          stationary = False,
                          error_action ='ignore',   
                          suppress_warnings = True,  
                          stepwise = True, n_fits=50)
#%%
# ARIMA MODEL SELECTION - CANADIAN ARCHIPELAGO
ca_arima_model = auto_arima(canarc_m, start_p = 1, d=1, start_q = 1, 
                          max_p = 5, max_q = 5, max_d=5, m = 12, 
                          start_P = 0, D=0, start_Q=0, max_P=5, max_D=5, max_Q=5,
                          seasonal = True, 
                          trace = True, 
                          stationary = False,
                          error_action ='ignore',   
                          suppress_warnings = True,  
                          stepwise = True, n_fits=50)
#%%
# ARIMA MODEL SELECTION - HUDSON BAY
hb_arima_model = auto_arima(hudson_m, start_p = 1, d=1, start_q = 1, 
                          max_p = 5, max_q = 5, max_d=5, m = 12, 
                          start_P = 0, D=0, start_Q=0, max_P=5, max_D=5, max_Q=5,
                          seasonal = True, 
                          trace = True, 
                          stationary = False,
                          error_action ='ignore',   
                          suppress_warnings = True,  
                          stepwise = True, n_fits=50)
#%%
print(baf_arima_model.summary() )
#%%
print(beau_arima_model.summary() )
#%%
print(ca_arima_model.summary() )
#%%
print(hb_arima_model.summary() )
#%%
#SARIMAX MODEL - BAFFIN
from statsmodels.tsa.statespace.sarimax import SARIMAX 

size = int(len(baff_m) * 0.66)
X_train, X_test = baff_m[0:size], baff_m[size:len(baff_m)]
baf_s_mod_start=time.time()
model = SARIMAX(X_train,  
                order = (4, 1, 4),  
                seasonal_order =(2, 0, 1, 12)) 
baf_s_mod_stop=time.time()
result = model.fit() 
result.summary()
#%%
#SARIMAX MODEL - BEAUFORT SEA

size_be = int(len(beau_m) * 0.66)
X_train_be, X_test_be = beau_m[0:size], beau_m[size:len(beau_m)]
be_s_mod_start=time.time()
model_be = SARIMAX(X_train_be,  
                order = (5, 1, 0),  
                seasonal_order =(1, 0, 1, 12)) 
be_s_mod_stop=time.time()
result_be = model_be.fit() 
result_be.summary()
#%%
#SARIMAX MODEL - CANADIAN ARCHIPELAGO

size_ca = int(len(canarc_m) * 0.66)
X_train_ca, X_test_ca = canarc_m[0:size], canarc_m[size:len(canarc_m)]
ca_s_mod_start=time.time()
model_ca = SARIMAX(X_train_ca,  
                order = (5, 1, 0),  
                seasonal_order =(1, 0, 1, 12)) 
ca_s_mod_stop=time.time()
result_ca = model_ca.fit() 
result_ca.summary()
#%%
#SARIMAX MODEL - HUDSON BAY

size_hb = int(len(hudson_m) * 0.66)
X_train_hb, X_test_hb = hudson_m[0:size], hudson_m[size:len(hudson_m)]
hb_s_mod_start=time.time()
model_hb = SARIMAX(X_train_hb,  
                order = (3, 1, 2),  
                seasonal_order =(1, 0, 1, 12)) 
hb_s_mod_stop=time.time()
result_hb = model_hb.fit() 
result_hb.summary()
#%% Prediction - BAFFIN
start_index = len(X_train)
end_index = len(baff_m)-1
baf_s_pred_start=time.time()
prediction = result.predict(start_index,end_index).rename('Predicted Sea Ice')
baf_s_pred_stop=time.time()
#%% Prediction - BEAUFORT SEA
start_index_be = len(X_train_be)
end_index_be = len(beau_m)-1
be_s_pred_start=time.time()
prediction_be = result_be.predict(start_index_be,end_index_be).rename('Predicted Sea Ice')
be_s_pred_stop=time.time()
#%% Prediction - CANADIAN ARCHIPELAGO
start_index_ca = len(X_train_ca)
end_index_ca = len(canarc_m)-1
ca_s_pred_start=time.time()
prediction_ca = result_ca.predict(start_index_ca,end_index_ca).rename('Predicted Sea Ice')
ca_s_pred_stop=time.time()
#%% Prediction - HUDSON BAY
start_index_hb = len(X_train_hb)
end_index_hb = len(hudson_m)-1
hb_s_pred_start=time.time()
prediction_hb = result_hb.predict(start_index_hb,end_index_hb).rename('Predicted Sea Ice')
hb_s_pred_stop=time.time()
#%%
import math
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
baf_s_mod_time = baf_s_mod_stop - baf_s_mod_start
baf_s_pred_time = baf_s_pred_stop - baf_s_pred_start
testScore = math.sqrt(mean_squared_error(X_test, prediction))
testScoreN = testScore/(max(X_test)-min(X_test))
testr2 = r2_score(X_test, prediction)
testmae = mean_absolute_error(X_test, prediction)/X_test.mean()
plt.figure(figsize=(15, 8))
prediction.plot(legend=True)
X_test.plot(legend=True, label="Actual")
plt.legend(fontsize=20)
plt.title("Baffin SARIMAX Monthly Model \nR2: %.10f" % (testr2)+"\nNRMSE: %.10f" % (testScoreN)+"\nNMAE: %.10f" % (testmae))
print("Train Time {}".format(baf_s_mod_time)+"s"+ "\nPrediction Time: {}".format(baf_s_pred_time)+"s")

#%%
be_s_mod_time = be_s_mod_stop - be_s_mod_start
be_s_pred_time = be_s_pred_stop - be_s_pred_start
testScore_be = math.sqrt(mean_squared_error(X_test_be, prediction_be))
testScoreN_be = testScore_be/(max(X_test_be)-min(X_test_be))
testr2_be = r2_score(X_test_be, prediction_be)
testmae_be = mean_absolute_error(X_test_be, prediction_be)/X_test_be.mean()
plt.figure(figsize=(15, 8))
prediction_be.plot(legend=True)
X_test_be.plot(legend=True,label="Actual")
plt.legend(fontsize=20)
plt.title("Beaufort Sea SARIMAX Monthly Model \nR2: %.10f" % (testr2_be)+"\nNRMSE: %.10f" % (testScoreN_be)+"\nNMAE: %.10f" % (testmae_be))
print("Train Time {}".format(be_s_mod_time)+"s"+ "\nPrediction Time: {}".format(be_s_pred_time)+"s")

#%%
ca_s_mod_time = ca_s_mod_stop - ca_s_mod_start
ca_s_pred_time = ca_s_pred_stop - ca_s_pred_start
testScore_ca = math.sqrt(mean_squared_error(X_test_ca, prediction_ca))
testScoreN_ca = testScore_ca/(max(X_test_ca)-min(X_test_ca))
testr2_ca = r2_score(X_test_ca, prediction_ca)
testmae_ca = mean_absolute_error(X_test_ca, prediction_ca)/X_test_ca.mean()
plt.figure(figsize=(15, 8))
prediction_ca.plot(legend=True)
X_test_ca.plot(legend=True, label="Actual")
plt.legend(fontsize=20)
plt.title("Canadian Archipelago SARIMAX Monthly Model \nR2: %.10f" % (testr2_ca)+"\nNRMSE: %.10f" % (testScoreN_ca)+"\nNMAE: %.10f" % (testmae_ca))
print("Train Time {}".format(ca_s_mod_time)+"s"+ "\nPrediction Time: {}".format(ca_s_pred_time)+"s")
#%%
hb_s_mod_time = hb_s_mod_stop - hb_s_mod_start
hb_s_pred_time = hb_s_pred_stop - hb_s_pred_start
testScore_hb = math.sqrt(mean_squared_error(X_test_hb, prediction_hb))
testScoreN_hb = testScore_hb/(max(X_test_hb)-min(X_test_hb))
testr2_hb = r2_score(X_test_hb, prediction_hb)
testmae_hb = mean_absolute_error(X_test_hb, prediction_hb)/X_test_hb.mean()
plt.figure(figsize=(15, 8))
prediction_hb.plot(legend=True)
X_test_hb.plot(legend=True, label="Actual")
plt.legend(fontsize=20)
plt.title("Hudson Bay SARIMAX Monthly Model \nR2: %.10f" % (testr2_hb)+"\nNRMSE: %.10f" % (testScoreN_hb)+"\nNMAE: %.10f" % (testmae_hb))
print("Train Time {}".format(hb_s_mod_time)+"s"+ "\nPrediction Time: {}".format(hb_s_pred_time)+"s")
#%% 
# Baffin quarterly - ARIMA Model Selection via AutoARIMA
baf_q = baffin_melt['BAFFIN SEA ICE EXTENT'].groupby(pd.Grouper(freq="q")).mean()
baf_arima_q_model = auto_arima(baf_q, start_p = 1, d=1, start_q = 1, 
                          max_p = 5, max_q = 5, max_d=5, m = 1, 
                          start_P = 0, D=0, start_Q=0, max_P=5, max_D=5, max_Q=5,
                          seasonal = False, 
                          trace = True, 
                          stationary = False,
                          error_action ='ignore',   
                          suppress_warnings = True,  
                          stepwise = True, n_fits=50)
#%%
print(baf_arima_q_model.summary() )
#%%
#SARIMAX MODEL - Baffin Quarterly

size = int(len(baf_q) * 0.66)
X_train_baf_q, X_test_baf_q = baf_q[0:size], baf_q[size:len(baf_q)]
baf_qs_mod_start=time.time()
model_baf_q = SARIMAX(X_train_baf_q,  
                order = (0, 1, 5),
                seasonal_order =(0, 0, 0, 0)) 
baf_qs_mod_stop=time.time()  
result_baf_q = model_baf_q.fit() 
result_baf_q.summary()
#%% Prediction - Baffin Quarterly
start_index_baf_q = len(X_train_baf_q)
end_index_baf_q = len(baf_q)-1
baf_qs_pred_start=time.time()
prediction_baf_q = result_baf_q.predict(start_index_baf_q,end_index_baf_q).rename('Predicted Sea Ice')
baf_qs_pred_stop=time.time()
#%% Baffin Quarterly SARIMAX Plot
baf_qs_mod_time = baf_qs_mod_stop - baf_qs_mod_start
baf_qs_pred_time = baf_qs_pred_stop - baf_qs_pred_start
testScore_baf_q = math.sqrt(mean_squared_error(X_test_baf_q, prediction_baf_q))
testScoreN_baf_q = testScore/(max(X_test_baf_q)-min(X_test_baf_q))
testr2_baf_q = r2_score(X_test_baf_q, prediction_baf_q)
testmae_bafq = mean_absolute_error(X_test_baf_q, prediction_baf_q)/X_test_baf_q.mean()
plt.figure(figsize=(15, 8))
plt.legend(fontsize=20)
prediction_baf_q.plot(legend=True)
X_test_baf_q.plot(legend=True, label = "Actual")
plt.title("Baffin SARIMAX Quarterly Model \nR2: %.10f" % (testr2_baf_q)+"\nRMSE: %.10f" % (testScoreN_baf_q)+"\nNMAE: %.10f" % (testmae_bafq))
print("Train Time {}".format(baf_qs_mod_time)+"s"+ "\nPrediction Time: {}".format(baf_qs_pred_time)+"s")
#%%
#Beaufort Sea - ARIMA Model Selection via AutoARIMA
beau_q = beau_melt['BEAUFORT SEA ICE EXTENT'].groupby(pd.Grouper(freq="q")).mean()
beau_arima_q_model = auto_arima(beau_q, start_p = 1, d=1, start_q = 1, 
                          max_p = 5, max_q = 5, max_d=5, m = 1, 
                          start_P = 0, D=0, start_Q=0, max_P=5, max_D=5, max_Q=5,
                          seasonal = False, 
                          trace = True, 
                          stationary = False,
                          error_action ='ignore',   
                          suppress_warnings = True,  
                          stepwise = True, n_fits=50)
print(beau_arima_q_model.summary() )
#%%
#SARIMAX MODEL - BEAUFORT SEA QUARTERLY

size = int(len(baf_q) * 0.66)
X_train_beau_q, X_test_beau_q = beau_q[0:size], beau_q[size:len(beau_q)]
be_qs_mod_start = time.time()
model_beau_q = SARIMAX(X_train_beau_q,  
                order = (0, 1, 1),
                seasonal_order =(0, 0, 0, 0)) 
be_qs_mod_stop = time.time()
result_beau_q = model_beau_q.fit() 
result_beau_q.summary()
#%% Prediction - Beaufort Sea Quarterly
start_index_beau_q = len(X_train_beau_q)
end_index_beau_q = len(beau_q)-1
be_qs_pred_start = time.time()
prediction_beau_q = result_beau_q.predict(start_index_beau_q,end_index_beau_q).rename('Predicted Sea Ice')
be_qs_pred_stop = time.time()
#%%
#Plot Beaufort Sea SARIMAX Prediction Quarterly
be_qs_mod_time = be_qs_mod_stop - be_qs_mod_start
be_qs_pred_time = be_qs_pred_stop - be_qs_pred_start
testScore_beau_q = math.sqrt(mean_squared_error(X_test_beau_q, prediction_beau_q))
testScoreN_beau_q = testScore/(max(X_test_beau_q)-min(X_test_beau_q))
testr2_beau_q = r2_score(X_test_beau_q, prediction_beau_q)
testmae_beq = mean_absolute_error(X_test_beau_q, prediction_beau_q)/X_test_beau_q.mean()
plt.figure(figsize=(15, 8))
prediction_beau_q.plot(legend=True)
X_test_beau_q.plot(legend=True,label="Actual")
plt.legend(fontsize=20)
plt.title("Beaufort SARIMAX Quarterly Model \nR2: %.10f" % (testr2_beau_q)+"\nRMSE: %.10f" % (testScoreN_beau_q)+"\nNMAE: %.10f" % (testmae_beq))
print("Train Time {}".format(be_qs_mod_time)+"s"+ "\nPrediction Time: {}".format(be_qs_pred_time)+"s")
#%%
#Canadian Archipelago Quarterly - ARIMA Model Selection via AutoARIMA
ca_q = canarc_melt['CAN. ARCH. SEA ICE EXTENT'].groupby(pd.Grouper(freq="q")).mean()
ca_arima_q_model = auto_arima(ca_q, start_p = 1, d=1, start_q = 1, 
                          max_p = 5, max_q = 5, max_d=5, m = 1, 
                          start_P = 0, D=0, start_Q=0, max_P=5, max_D=5, max_Q=5,
                          seasonal = False, 
                          trace = True, 
                          stationary = False,
                          error_action ='ignore',   
                          suppress_warnings = True,  
                          stepwise = True, n_fits=50)
print(ca_arima_q_model.summary() )
#%%
#SARIMAX MODEL - CANADIAN ARCHIPELAGO QUARTERLY

size = int(len(ca_q) * 0.66)
X_train_ca_q, X_test_ca_q = ca_q[0:size], ca_q[size:len(ca_q)]
ca_qs_mod_start = time.time()
model_ca_q = SARIMAX(X_train_ca_q,  
                order = (4, 1, 1),
                seasonal_order =(0, 0, 0, 0)) 
ca_qs_mod_stop = time.time()
result_ca_q = model_ca_q.fit() 
result_ca_q.summary()
#%% Prediction - Canadian Archipelago
start_index_ca_q = len(X_train_ca_q)
end_index_ca_q = len(ca_q)-1
ca_qs_pred_start = time.time()
prediction_ca_q = result_ca_q.predict(start_index_ca_q,end_index_ca_q).rename('Predicted Sea Ice')
ca_qs_pred_stop = time.time()
#%% Plot - Canadian Archipelago Quarterly SARIMAX Prediction
ca_qs_mod_time = ca_qs_mod_stop - ca_qs_mod_start
ca_qs_pred_time = ca_qs_pred_stop - ca_qs_pred_start
testScore_ca_q = math.sqrt(mean_squared_error(X_test_ca_q, prediction_ca_q))
testScoreN_ca_q = testScore/(max(X_test_ca_q)-min(X_test_ca_q))
testr2_ca_q = r2_score(X_test_ca_q, prediction_ca_q)
testmae_ca = mean_absolute_error(X_test_ca_q, prediction_ca_q)/X_test_ca_q.mean()
plt.figure(figsize=(15, 8))
prediction_ca_q.plot(legend=True)
X_test_ca_q.plot(legend=True, label="Actual")
plt.legend(fontsize=20)
plt.title("Canadian Archipelago SARIMAX Quarterly Model \nR2: %.10f" % (testr2_ca_q)+"\nRMSE: %.10f" % (testScoreN_ca_q)+"\nNMAE: %.10f" % (testmae_ca))
print("Train Time {}".format(ca_qs_mod_time)+"s"+ "\nPrediction Time: {}".format(ca_qs_pred_time)+"s")

#%%
#Hudson Bay Quarterly - ARIMA Model Selection via AutoARIMA
hb_q = hudson_melt['HUDSON BAY SEA ICE EXTENT'].groupby(pd.Grouper(freq="q")).mean()
hb_arima_q_model = auto_arima(hb_q, start_p = 1, d=1, start_q = 1, 
                          max_p = 5, max_q = 5, max_d=5, m = 1, 
                          start_P = 0, D=0, start_Q=0, max_P=5, max_D=5, max_Q=5,
                          seasonal = False, 
                          trace = True, 
                          stationary = False,
                          error_action ='ignore',   
                          suppress_warnings = True,  
                          stepwise = True, n_fits=50)
print(hb_arima_q_model.summary() )
#%%
#SARIMAX MODEL - Hudson Bay Quarterly

size = int(len(hb_q) * 0.66)
X_train_hb_q, X_test_hb_q = hb_q[0:size], hb_q[size:len(hb_q)]
hb_qs_mod_start = time.time()
model_hb_q = SARIMAX(X_train_hb_q,  
                order = (0, 1, 5),
                seasonal_order =(0, 0, 0, 0)) 
hb_qs_mod_stop = time.time()
result_hb_q = model_hb_q.fit() 
result_hb_q.summary()
#%% Prediction - Hudson Bay Quarterly
start_index_hb_q = len(X_train_hb_q)
end_index_hb_q = len(hb_q)-1
hb_qs_pred_start = time.time()
prediction_hb_q = result_hb_q.predict(start_index_hb_q,end_index_hb_q).rename('Predicted Sea Ice')
hb_qs_pred_stop = time.time()
#%% Plot - Hudson Bay Quarterly SARIMAX Prediction
hb_qs_mod_time = hb_qs_mod_stop - hb_qs_mod_start
hb_qs_pred_time = hb_qs_pred_stop - hb_qs_pred_start
testScore_hb_q = math.sqrt(mean_squared_error(X_test_hb_q, prediction_hb_q))
testScoreN_hb_q = testScore/(max(X_test_hb_q)-min(X_test_hb_q))
testr2_hb_q = r2_score(X_test_hb_q, prediction_hb_q)
testmae_hb = mean_absolute_error(X_test_hb_q, prediction_hb_q)/X_test_hb_q.mean()
plt.figure(figsize=(15, 8))
prediction_hb_q.plot(legend=True)

X_test_hb_q.plot(legend=True, label="Actual")
plt.legend(fontsize=20)
plt.title("Hudson Bay SARIMAX Quarterly Model \nR2: %.10f" % (testr2_hb_q)+"\nRMSE: %.10f" % (testScoreN_hb_q)+"\nNMAE: %.10f" % (testmae_hb))
print("Train Time {}".format(hb_qs_mod_time)+"s"+ "\nPrediction Time: {}".format(hb_qs_pred_time)+"s")
